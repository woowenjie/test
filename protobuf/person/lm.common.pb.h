// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lm.common.proto

#ifndef PROTOBUF_lm_2ecommon_2eproto__INCLUDED
#define PROTOBUF_lm_2ecommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace lm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lm_2ecommon_2eproto();
void protobuf_AssignDesc_lm_2ecommon_2eproto();
void protobuf_ShutdownFile_lm_2ecommon_2eproto();

class PhoneNumber;

enum PhoneNumber_PhoneType {
  PhoneNumber_PhoneType_MOBILE = 1,
  PhoneNumber_PhoneType_HOME = 2,
  PhoneNumber_PhoneType_WORK = 3
};
bool PhoneNumber_PhoneType_IsValid(int value);
const PhoneNumber_PhoneType PhoneNumber_PhoneType_PhoneType_MIN = PhoneNumber_PhoneType_MOBILE;
const PhoneNumber_PhoneType PhoneNumber_PhoneType_PhoneType_MAX = PhoneNumber_PhoneType_WORK;
const int PhoneNumber_PhoneType_PhoneType_ARRAYSIZE = PhoneNumber_PhoneType_PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhoneNumber_PhoneType_descriptor();
inline const ::std::string& PhoneNumber_PhoneType_Name(PhoneNumber_PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhoneNumber_PhoneType_descriptor(), value);
}
inline bool PhoneNumber_PhoneType_Parse(
    const ::std::string& name, PhoneNumber_PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhoneNumber_PhoneType>(
    PhoneNumber_PhoneType_descriptor(), name, value);
}
// ===================================================================

class PhoneNumber : public ::google::protobuf::Message {
 public:
  PhoneNumber();
  virtual ~PhoneNumber();
  
  PhoneNumber(const PhoneNumber& from);
  
  inline PhoneNumber& operator=(const PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneNumber& default_instance();
  
  void Swap(PhoneNumber* other);
  
  // implements Message ----------------------------------------------
  
  PhoneNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhoneNumber& from);
  void MergeFrom(const PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PhoneNumber_PhoneType PhoneType;
  static const PhoneType MOBILE = PhoneNumber_PhoneType_MOBILE;
  static const PhoneType HOME = PhoneNumber_PhoneType_HOME;
  static const PhoneType WORK = PhoneNumber_PhoneType_WORK;
  static inline bool PhoneType_IsValid(int value) {
    return PhoneNumber_PhoneType_IsValid(value);
  }
  static const PhoneType PhoneType_MIN =
    PhoneNumber_PhoneType_PhoneType_MIN;
  static const PhoneType PhoneType_MAX =
    PhoneNumber_PhoneType_PhoneType_MAX;
  static const int PhoneType_ARRAYSIZE =
    PhoneNumber_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhoneType_descriptor() {
    return PhoneNumber_PhoneType_descriptor();
  }
  static inline const ::std::string& PhoneType_Name(PhoneType value) {
    return PhoneNumber_PhoneType_Name(value);
  }
  static inline bool PhoneType_Parse(const ::std::string& name,
      PhoneType* value) {
    return PhoneNumber_PhoneType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  
  // optional .lm.PhoneNumber.PhoneType type = 2 [default = HOME];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::lm::PhoneNumber_PhoneType type() const;
  inline void set_type(::lm::PhoneNumber_PhoneType value);
  
  // @@protoc_insertion_point(class_scope:lm.PhoneNumber)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* number_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_lm_2ecommon_2eproto();
  friend void protobuf_AssignDesc_lm_2ecommon_2eproto();
  friend void protobuf_ShutdownFile_lm_2ecommon_2eproto();
  
  void InitAsDefaultInstance();
  static PhoneNumber* default_instance_;
};
// ===================================================================


// ===================================================================

// PhoneNumber

// required string number = 1;
inline bool PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhoneNumber::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& PhoneNumber::number() const {
  return *number_;
}
inline void PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void PhoneNumber::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void PhoneNumber::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PhoneNumber::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* PhoneNumber::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .lm.PhoneNumber.PhoneType type = 2 [default = HOME];
inline bool PhoneNumber::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhoneNumber::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhoneNumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhoneNumber::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::lm::PhoneNumber_PhoneType PhoneNumber::type() const {
  return static_cast< ::lm::PhoneNumber_PhoneType >(type_);
}
inline void PhoneNumber::set_type(::lm::PhoneNumber_PhoneType value) {
  GOOGLE_DCHECK(::lm::PhoneNumber_PhoneType_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lm

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::PhoneNumber_PhoneType>() {
  return ::lm::PhoneNumber_PhoneType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lm_2ecommon_2eproto__INCLUDED
